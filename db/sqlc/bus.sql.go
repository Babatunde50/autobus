// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: bus.sql

package db

import (
	"context"
)

const createBus = `-- name: CreateBus :one
INSERT INTO bus (bus_number, bus_plate_number, capacity)
VALUES ($1, $2, $3)
RETURNING id, bus_number, bus_plate_number, capacity, created_at, updated_at
`

type CreateBusParams struct {
	BusNumber      string `json:"bus_number"`
	BusPlateNumber string `json:"bus_plate_number"`
	Capacity       int32  `json:"capacity"`
}

func (q *Queries) CreateBus(ctx context.Context, arg CreateBusParams) (Bus, error) {
	row := q.db.QueryRowContext(ctx, createBus, arg.BusNumber, arg.BusPlateNumber, arg.Capacity)
	var i Bus
	err := row.Scan(
		&i.ID,
		&i.BusNumber,
		&i.BusPlateNumber,
		&i.Capacity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteBus = `-- name: DeleteBus :one
DELETE FROM bus
WHERE id = $1
RETURNING id, bus_number, bus_plate_number, capacity, created_at, updated_at
`

func (q *Queries) DeleteBus(ctx context.Context, id int64) (Bus, error) {
	row := q.db.QueryRowContext(ctx, deleteBus, id)
	var i Bus
	err := row.Scan(
		&i.ID,
		&i.BusNumber,
		&i.BusPlateNumber,
		&i.Capacity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBus = `-- name: GetBus :one
SELECT id, bus_number, bus_plate_number, capacity, created_at, updated_at
FROM bus
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBus(ctx context.Context, id int64) (Bus, error) {
	row := q.db.QueryRowContext(ctx, getBus, id)
	var i Bus
	err := row.Scan(
		&i.ID,
		&i.BusNumber,
		&i.BusPlateNumber,
		&i.Capacity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listBuses = `-- name: ListBuses :many
SELECT id, bus_number, bus_plate_number, capacity, created_at, updated_at
FROM bus
ORDER BY capacity
`

func (q *Queries) ListBuses(ctx context.Context) ([]Bus, error) {
	rows, err := q.db.QueryContext(ctx, listBuses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Bus{}
	for rows.Next() {
		var i Bus
		if err := rows.Scan(
			&i.ID,
			&i.BusNumber,
			&i.BusPlateNumber,
			&i.Capacity,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateBus = `-- name: UpdateBus :one
UPDATE bus
SET capacity = $1
RETURNING id, bus_number, bus_plate_number, capacity, created_at, updated_at
`

func (q *Queries) UpdateBus(ctx context.Context, capacity int32) (Bus, error) {
	row := q.db.QueryRowContext(ctx, updateBus, capacity)
	var i Bus
	err := row.Scan(
		&i.ID,
		&i.BusNumber,
		&i.BusPlateNumber,
		&i.Capacity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
