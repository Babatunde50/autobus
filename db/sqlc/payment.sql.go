// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: payment.sql

package db

import (
	"context"
	"time"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payment (amount_paid, payment_date, passenger_id)
VALUES ($1, $2, $3)
RETURNING id, amount_paid, payment_date, passenger_id, created_at
`

type CreatePaymentParams struct {
	AmountPaid  float64   `json:"amount_paid"`
	PaymentDate time.Time `json:"payment_date"`
	PassengerID int64     `json:"passenger_id"`
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment, arg.AmountPaid, arg.PaymentDate, arg.PassengerID)
	var i Payment
	err := row.Scan(
		&i.ID,
		&i.AmountPaid,
		&i.PaymentDate,
		&i.PassengerID,
		&i.CreatedAt,
	)
	return i, err
}

const getPassengerPayments = `-- name: GetPassengerPayments :many
SELECT id, amount_paid, payment_date, passenger_id, created_at
FROM payment
WHERE passenger_id = $1
`

func (q *Queries) GetPassengerPayments(ctx context.Context, passengerID int64) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, getPassengerPayments, passengerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(
			&i.ID,
			&i.AmountPaid,
			&i.PaymentDate,
			&i.PassengerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
