// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: schedule.sql

package db

import (
	"context"
	"time"
)

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedule (
        bus_id,
        driver_id,
        starting_point,
        destination,
        schedule_date,
        departure_time,
        estimated_arrival_time,
        fare_amount,
        remarks
    )
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
RETURNING id, bus_id, driver_id, starting_point, destination, schedule_date, departure_time, estimated_arrival_time, fare_amount, remarks, created_at, updated_at
`

type CreateScheduleParams struct {
	BusID                int64     `json:"bus_id"`
	DriverID             int64     `json:"driver_id"`
	StartingPoint        string    `json:"starting_point"`
	Destination          string    `json:"destination"`
	ScheduleDate         time.Time `json:"schedule_date"`
	DepartureTime        time.Time `json:"departure_time"`
	EstimatedArrivalTime time.Time `json:"estimated_arrival_time"`
	FareAmount           float64   `json:"fare_amount"`
	Remarks              string    `json:"remarks"`
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, createSchedule,
		arg.BusID,
		arg.DriverID,
		arg.StartingPoint,
		arg.Destination,
		arg.ScheduleDate,
		arg.DepartureTime,
		arg.EstimatedArrivalTime,
		arg.FareAmount,
		arg.Remarks,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.BusID,
		&i.DriverID,
		&i.StartingPoint,
		&i.Destination,
		&i.ScheduleDate,
		&i.DepartureTime,
		&i.EstimatedArrivalTime,
		&i.FareAmount,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteSchedule = `-- name: DeleteSchedule :one
DELETE FROM schedule
WHERE id = $1
RETURNING id, bus_id, driver_id, starting_point, destination, schedule_date, departure_time, estimated_arrival_time, fare_amount, remarks, created_at, updated_at
`

func (q *Queries) DeleteSchedule(ctx context.Context, id int64) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, deleteSchedule, id)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.BusID,
		&i.DriverID,
		&i.StartingPoint,
		&i.Destination,
		&i.ScheduleDate,
		&i.DepartureTime,
		&i.EstimatedArrivalTime,
		&i.FareAmount,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSchedule = `-- name: GetSchedule :one
SELECT id, bus_id, driver_id, starting_point, destination, schedule_date, departure_time, estimated_arrival_time, fare_amount, remarks, created_at, updated_at
FROM schedule
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetSchedule(ctx context.Context, id int64) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, getSchedule, id)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.BusID,
		&i.DriverID,
		&i.StartingPoint,
		&i.Destination,
		&i.ScheduleDate,
		&i.DepartureTime,
		&i.EstimatedArrivalTime,
		&i.FareAmount,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listSchedules = `-- name: ListSchedules :many
SELECT id, bus_id, driver_id, starting_point, destination, schedule_date, departure_time, estimated_arrival_time, fare_amount, remarks, created_at, updated_at
FROM schedule
`

func (q *Queries) ListSchedules(ctx context.Context) ([]Schedule, error) {
	rows, err := q.db.QueryContext(ctx, listSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Schedule{}
	for rows.Next() {
		var i Schedule
		if err := rows.Scan(
			&i.ID,
			&i.BusID,
			&i.DriverID,
			&i.StartingPoint,
			&i.Destination,
			&i.ScheduleDate,
			&i.DepartureTime,
			&i.EstimatedArrivalTime,
			&i.FareAmount,
			&i.Remarks,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSchedule = `-- name: UpdateSchedule :one
UPDATE schedule
SET starting_point = $1,
    destination = $2,
    schedule_date = $3,
    departure_time = $4,
    estimated_arrival_time = $5,
    fare_amount = $6,
    remarks = $7
RETURNING id, bus_id, driver_id, starting_point, destination, schedule_date, departure_time, estimated_arrival_time, fare_amount, remarks, created_at, updated_at
`

type UpdateScheduleParams struct {
	StartingPoint        string    `json:"starting_point"`
	Destination          string    `json:"destination"`
	ScheduleDate         time.Time `json:"schedule_date"`
	DepartureTime        time.Time `json:"departure_time"`
	EstimatedArrivalTime time.Time `json:"estimated_arrival_time"`
	FareAmount           float64   `json:"fare_amount"`
	Remarks              string    `json:"remarks"`
}

func (q *Queries) UpdateSchedule(ctx context.Context, arg UpdateScheduleParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, updateSchedule,
		arg.StartingPoint,
		arg.Destination,
		arg.ScheduleDate,
		arg.DepartureTime,
		arg.EstimatedArrivalTime,
		arg.FareAmount,
		arg.Remarks,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.BusID,
		&i.DriverID,
		&i.StartingPoint,
		&i.Destination,
		&i.ScheduleDate,
		&i.DepartureTime,
		&i.EstimatedArrivalTime,
		&i.FareAmount,
		&i.Remarks,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
